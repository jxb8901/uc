options {
  STATIC=false;
  FORCE_LA_CHECK=true;
}

PARSER_BEGIN(Parser)

package net.ninecube.fishman.parser;

import java.util.*;

@SuppressWarnings("unchecked")
public class Parser {
}

PARSER_END(Parser)

//~ lexer

TOKEN_MGR_DECLS :
{
	String nameOfChecked = "Template";
	
	private void checkTag(Token tok) {
		if (!tok.image.endsWith(nameOfChecked)) {
			tok.kind = STATICBLOCK;
			SwitchTo(DEFAULT);
		}
		else {
			SwitchTo(IN_TAGBLOCK);
		}
	}
}

<DEFAULT>
MORE : 
{
  < "<!--" > :  COMMENT
}

<DEFAULT>
TOKEN : 
{
  < STATICBLOCK : ( ~[] ) >
}

<COMMENT, IN_TAGBLOCK>
MORE:
{
  " " | "\t" | "\f" | "\r" | "\n"
}

<COMMENT>
TOKEN : 
{
  < BEGINTAGBLOCK : "BeginTemplate" | "BeginInstance" > { checkTag(matchedToken); }
|
  < ENDTAGBLOCK : "EndTemplate" | "EndInstance" > { checkTag(matchedToken); }
}

<COMMENT>
MORE:
{
  < ~[] > : DEFAULT
}

<IN_TAGBLOCK>
TOKEN:
{
  < EQ : "=" >
|
  < QUOTE: "\"" | "'" >
|
  < NAME: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: [ "$", "A"-"Z", "_", "a"-"z" ] > 
|
  < #DIGIT: [ "0"-"9" ] >
|
  < TAGEND: "-->" > : DEFAULT
}

BlockImpl next() :
{
	Token t = null;
	Map<String, String> properties = null;
	StringBuffer s = new StringBuffer();
}
{
	(
		( t = <STATICBLOCK> { s.append(t.image); } ) + { return new BlockImpl(s.toString()); }
		|
		( 
			t = <BEGINTAGBLOCK> { s.append(t.image); } 
			properties = properties(s) 
			t = <TAGEND> { s.append(t.image); }
		) { return new BlockImpl(s.toString(), properties, true); }
		|
		( 
			t = <ENDTAGBLOCK> { s.append(t.image); }
			properties = properties(s) 
			t = <TAGEND> { s.append(t.image); }
		) { return new BlockImpl(s.toString(), properties, false); }
		|
		<EOF> { return null; }
	)
}

Map<String, String> properties(StringBuffer s) : 
{
	Token name, value, t;
	Map<String, String> ret = new HashMap<String, String>();
}
{
	( 
		name = <NAME> { s.append(name.image); }
		t = <EQ> { s.append(t.image); }
		t = <QUOTE> { s.append(t.image); } 
		value = <NAME> { s.append(value.image); } 
		t = <QUOTE> { s.append(t.image); } 
		{ ret.put(name.image.trim(), value.image.trim()); }
	) *
	{ return ret; }
}
