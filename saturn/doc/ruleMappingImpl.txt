**目的
为简化规则设定,需用一种方式将规则以利于业务人员的方式展现出来.
**实现方法.
  以映射的方式,将内部规则映射为类自然语言.
  
**用户操作模式
  1.直接写规则
  2.通过菜单选择规则,然后只允许用户对其中的参数进行修改  
**实现想法

  0.0.规则的分类
    1.从执行过程来分:独立性规则,依赖性规则,描述性规则
     a.独立性规则.本身可单独执行,不依赖于其它规则.
       如:
         POS消费每<200>元，送积分<30>分
     b.依赖性规则.本身没有单独执行功能,只是对其它规则进行补充限制作用.
			 如:
			   如果:持卡人生日<当月>
         那么:
         	<刷卡消费>可以获得<2>倍积分
         如果结束
         
     c.描述性规则.描述对象的特性,从而锁定一定的对象群.如客户群规则和评价指标体系
       或可将其作为依赖性规则实现
         
     每条用户输入逻辑规则将由一条独立性规则和多条赖性规则组成.依赖性规则将对独立性规则的结果进行修饰
       
     2.从营销计划的管理方面来看,可分为:客户群规则,补充性规则,营销规则,营销活动总结性规则
       a.客户群规则.指定营销计划的受众.
       b.补充性规则.指定营销规则的一些限制性条件,以及对营销规则施加的影响.主要应于上一分类中的依赖性规则.
       c.营销规则.在营销活动期间,每一次执行期间都要运行的规则.
       d.营销活动总结性规则.在营销活动结束后,执行的规则
        
  
  1.命名参数定义原子函数
    例1:
      1.积分规则:
        POS消费每200元，送积分30分
      2.规则定义:
    	  POS消费每<金额>元，送积分<数值>分=消费积分（POS消费，<金额>，<数值>）
      3.用户输入:
        POS消费每<200>元，送积分<30>分
      4.匹配
      
    例2:
      1.积分规则:
        
      2.规则定义:
    	  
      3.用户输入:
        
      4.匹配
      

      
    例3:
      1.积分规则:
        如网上银行和电话银行合并交易累计三笔（含三笔）以上，且每笔金额在50元以上的客户即可获得精美奖品一份。每个客户（以客户识别号为准）在本次活动中只能领取一份奖品，超出部分积分不再重复获奖

      2.规则定义:
    	  如网上银行和电话银行合并交易累计<交易量>笔<关系式>，且每笔金额在<金额>元以上的客户即可获得精美奖品一份。每个客户（以客户识别号为准）在本次活动中只能领取<奖品数>份奖品，超出部分积分不再重复获奖=IIF（交易笔数（交易类型：网银交易｜电话银行交易，最小金额：<金额>） <关系式> <交易量> 并且 领取礼品数量 ＜ <奖品数>，送礼品（礼品编号））

      3.用户输入:
        
      4.匹配
      
      
   2.函数执行流程控制.
     1.关键字
       如果: 并且 或者 那么: 否则:
     2.用法
       如果: (条件1 并且 条件2) 或者 条件3
       那么:
         动作...
       否则:
         动作...  
       如果结束.
         
     3.示例:
       a.规则:
         如网上银行和电话银行合并交易累计三笔（含三笔）以上，且每笔金额在50元以上的客户即可获得精美奖品一份。每个客户（以客户识别号为准）在本次活动中只能领取一份奖品，超出部分积分不再重复获奖
       b.规则定义.
         原子函数定义.见1.
       c.用户输入:
         如果:
             网上银行和电话银行合并交易累计<交易笔数>笔<关系式>
             并且 每笔金额在<金额>元以上
         那么:
             送礼品
       d.匹配
       
   3.规则引擎特性.
     1.有会话概念. 外部程序要执行一段规则,要先建立一个规则会话,与JDBC中的Connection概念类似.在一个会话中的规则共享一定的会话状态.
     2.提供多种执行方式.
       RuleSession RuleEngine.getSession();
       RuleResult RuleSession.execute(Map properties,String rules);
       RuleResult RuleSession.execute(Map properties,Reader ruleReader);
       ASTTree RuleSession.parseRule(Map properties,String rule);//解析规则为一个抽象语法树.
       //??是否提供该api 
       void RuleSession.close();
       
       
       
    3.
    
    
    **8.难点..
      1.客户群规则由于其作用是锁定规则执行对象,故其规则是不可执行的,更类似于限制性规则,怎么处理?
        将客户群规则作为规则属性实现,由独立性规则来处理.
        
      2.评价指标和评价体系规则由于其特性,其也不是可独立执行规则,如何处理.
        交由一个专门的评价体系后台运行程序执行.
      3.当规则引擎执行多条规则时,怎么样将每个用户逻辑规则区分开?每个逻辑规则由一个独立性规则和多个依赖性规则组成,逻辑规则是用户处理的最小规则单位.每个依赖性规则作用于该用户逻辑规则中的独立性规则.
        通过;隔开.该分.
   
   3.营销规则执行流程
     1.基本思路:
       由营销规则后台处理程序加载相应规则,规则引擎建立会话,执行相应规则
     2.营销计划规则
       1.思路:
       		营销规则后台处理程序处理营销计划的执行.其由跑批程序调用.
       2.表现形式
         
       3.实现细节
          
         步骤:
           1.取得当前所有激活状态的营销计划列表.对每一个营销计划执行如下操作.
           1.初始化营销计划Context
           2.读取指定营销计划内容
           3.取出客户群规则,调用规则引擎执行.一般客户群规则的执行,只是将客户群判定数据以中间格式进行整理,放入营销计划Context.不直接进行数据库操作.
           4.执行营销规则
             对每条逻辑营销规则执行下列步骤:
               (逻辑营销规则为用户输入的规则.其由一条独立性规则和多条依赖性规则组成)
             a.生成该营销规则Context.将该Context与营销计划Context组成context link
             b.重组执行该营销规则.
               将营销计划中的限制性规则附加至逻辑营销规则后,传至规则引擎执行.
           5.判定当日是否是营销计划执行的最后一天.如果是,则执行营销计划结束规则
             执行步骤同"营销规则"
             
       
   4.营销计划示例
     1.业务描述:
       从2006年05月01日起至2006年12月31日止,建行北京市分行全部个人网上银行客户, POS消费每200元，送积分30分,不足200元的部分不计分,持卡人在生日的当月刷卡消费可以获得双倍积分,当月最高积500分.
       同时,当月刷卡6次，单笔金额超过100元，自动免年费
     2.营销计划
       a.时间段:
         2006年05月01日 到 2006年12月31日
       b.客户群:
         建行北京市分行全部个人网上银行客户
       c.补充性规则
         如果:持卡人生日<当月>
         那么:
         	<刷卡消费>可以获得<2>倍积分
         如果结束
         
         当月最高积<500>分.
       d.营销规则
         POS消费每<200>元，送积分<30>分
         如果: 当月刷卡<大于或等于><6>次 并且 单笔金额<大于><100>元
         那么:
           自动免年费
         如果结束
       e.营销活动结束规则
         无
         


    


       
           
     
      

    
**难点:
  1.有时一个规则可能需要多个函数实现,可怎么样分开这些函数对应的显示串???
     是否可以以行为分隔,一个函数对应的显示串为一行
  2.映射时是否是映射原子函数,而允许用户进行组合?还是对一些函数组合也予以定义(如上例2)
     两者结合    
  3.函数的嵌套调用.在一个函数调用中调用另一个函数.
    是否要允许用户进行函数的嵌套调用.
  4.在定义规则时要区分条件规则和执行规则.在"如果"表达式中只能出现条件规则
    条件规则是返回值为布尔值的规则
  5.规则的执行以生成一个SQL的方式来执行.
    只有执行数据库操作(如更新)能尝试将其生成一个SQL来执行.
    规则分类:
      a.数据库更新类规则.如:积分规则;
      b.服务类规则.如:    
    
  6.由于IF等条件语句的存在,很难有一个简单的方法分开各条规则.
    规则引擎支持执行一个序列的规则.从而从语法上解决规则的划分问题.
    
  7.客户群规则是否也采用映射模式,以简化规则语法..

  8.一个营销计划指定的客户群是针对该营销计划的所有营销规则,那么有没有可能在一个营销计划里面有两条规则什对不同的客户群呢,怎么处理这种情况?
    分开单独建两个营销计划.
  9.能否将营销计划的限制性规则与补充性规则合并为补充性规则,因为它们都是对营销规则起补充限制作用.
    临时合并
    
**营销规则的声明式处理
     
     
   5.难点和待解决问题
     1.由于依赖性规则是对独立性规则进行修饰,有可能多条修饰可能产生结果交集的问题,故,只有依赖性规则全部执行完全后,独立性规则的动作才能真正触发.
       如下例:
       1.业务规则:
           从2006年05月01日起至2006年12月31日止,建行北京市分行全部个人网上银行客户, POS消费每200元，送积分30分,不足200元的部分不计分,持卡人在生日的当月刷卡消费可以获得双倍积分,当月普通客户最高积500分.
      2.规则抽取:
          a.独立性规则:
            POS消费每200元，送积分30分,不足200元的部分不计分
          b.依赖性规则
            1.持卡人在生日的当月刷卡消费可以获得双倍积分
            2.当月最高积500分
      3.执行流程分析.
        1.本例执行流程:
           a.执行独立性规则生成对数据库操作的sql object tree.
           b.执行依赖性规则1,对积分增加额予以双倍处理.
             注:如果前面独立性规则生成sql object tree.该规则只能取得 point=point+add节点,此时可能没法取得add值予以双倍处理.故前步独立性规则可能要加额外处理以提供add信息.
           c.执行依赖性规则2.对用户当月最高积分额度予以控制.根据用户当前当月已积分额度,调整积分增加额度,同时也要往sql object tree里面加入数据
             注:此处要获得经过依赖性规则修饰过的独立性规则提供的积分增加额,和目前为止当月用户已积分额度.
            
        2.通用性处理.
          依赖性规则可能会对不同的独立性规则进行处理,这样,依赖性规则内部就只能通过一个公用的接口来操作独立性规则,同时,依赖性规则不能存取与特定独立性规则相关的数据.以提高该规则的通用性
          或者是否执行流程可以假设为:
             1.规则引擎调用独立性规则进行预处理,返回结果对象.
             2.依次调用依赖性规则,传入上一规则执行结果对象作为参数.,每条依赖性规则执行以下步骤.
               a.调用传入结果对象的相应set方法,以注入依赖性或限定性规则
               b.将传入的结果对象返回.
             3.规则引擎调用结果对象的commit方法,完成该次规则的处理...  
             
     
     2.客户群规则如何处理,
       直接传入独立性规则,还是作为一个依赖性规则进行处理
       
     3.          
               
               
          
****规则执行详细流程
1.示例1
  1.示例营销计划
    中银VISA奥运信用卡积分：
    凭中银VISA奥运信用卡消费或取现1元人民币（或1美元），即可获得1分（或8分）的消费积分，在汽车类商户每消费100元人民币积8分（每消费100美元积64分），在房地产类商户每消费100元人民币积6分（每消费100美元积48分）。同一持卡人名下的中银VISA奥运信用卡和中银信用卡的积分可合并使用，主卡与附属卡的积分也可合并使用
  2.营销规则
    如果:交易类型<房地产>
    那么:  消费每<100>元，送积分6分
      <美元>消费,送<8>倍积分
    否则:
      如果:交易类型<汽车类>
      那么:
      	消费每<100>元，送积分8分
        <美元>消费,送<8>倍积分
        
      否则:
      	消费每<1>元，送积分1分
        <美元>消费,送<8>倍积分
        
      如果结束
    如果结束
    
  3.执行过程.
    执行方式可分批量执行和单笔执行两种.
    规则分类为:选择性规则,独立性规则和依赖性规则
      1.选择性规则:用于进行流程选择,如:"如果:,那么:"子句,它用于选择实际执行的规则
      2.独立性规则:是最终实际执行的规则.
      3.依赖性规则,用于对独立性规则施加某种影响,如最高积分额,双倍积分.它是一种简化的选择性规则
    思路:独立性规则是最终的执行规则,规则的执行方式80%受它影响,因此规则引擎在执行一条逻辑规则时,要先预评估每条独立性规则和其相关的信赖性规则的元数据后才能确定该规则的执行方式.
         注1:选择性规则需先评估它里面内嵌的独立性规则后方可确定该独立性规则的执行方式.
         注2:选择性规则需为它里面嵌套的每一条独立性规则,按其执行方式执行一次其条件表达式.对于否则部分则执行该表达式的否定方式.
    具体执行流程:
      1.获取条件函数"交易类型"元数据,判定其是否支持SQL生成,如果支持其所依赖的表名.该函数支持SQL生成,依赖表TransTable
      2.获取独立性函数"消费每<100>元，送积分6分"元数据,判定其是否支持SQL生成,如果支持其所依赖的表名.
      
    
        
