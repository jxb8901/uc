/* Generated By:JJTree&JavaCC: Do not edit this line. RuleParser.java */
package net.ninecube.saturn.ast;
import java.math.*;
import java.util.*;


import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import net.ninecube.saturn.*;
import net.ninecube.saturn.exception.*;

@SuppressWarnings("unchecked")
public class RuleParser/*@bgen(jjtree)*/implements RuleParserTreeConstants, RuleParserConstants {/*@bgen(jjtree)*/
  protected JJTRuleParserState jjtree = new JJTRuleParserState();
  protected static Log log = LogFactory.getLog(RuleParser.class);
  private List<Exception> exceptions = new ArrayList<Exception>();
  public RuleParser(String s) {
    this(new java.io.StringReader(s));
  }

  public void ReInit(String s) {
    ReInit(new java.io.StringReader(s));
  }

  public Start parse(Context context) {
    try{
          Start();
    }catch(Exception exc){
      exceptions.add(new RuleSyntaxException(exc.getMessage(),exc));
   }
   Start node =  (Start)jjtree.rootNode();
   log.debug("node : " + ((SimpleNode) node).getDumpStr());
   if(node !=null && context != null)
        node.validate(context,exceptions);
    if(!exceptions.isEmpty())  throw new RuleSyntaxExceptions(exceptions);
      return node;
  }

  public Filter parseFilter(Context context) {
    try{
          Filter();
    }catch(Exception exc){
      exceptions.add(new RuleSyntaxException(exc.getMessage(),exc));
    }
   Filter node  = null;
   if(jjtree.nodeArity() > 0 ) node =  (Filter)jjtree.rootNode();
   if(node !=null && context != null)
        node.validate(context,exceptions);
    if(!exceptions.isEmpty())  throw new RuleSyntaxExceptions(exceptions);
      return node;
  }

  final public void Start() throws ParseException {
 /*@bgen(jjtree) Start */
  Start jjtn000 = new Start(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CRLF:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(CRLF);
      }
      RegularRuleRegion();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        CycleRuleRegion();
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Filter() throws ParseException {
 /*@bgen(jjtree) Filter */
  Filter jjtn000 = new Filter(this, JJTFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      jj_consume_token(0);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void RegularRuleRegion() throws ParseException {
 /*@bgen(jjtree) RegularRuleRegion */
  RegularRuleRegion jjtn000 = new RegularRuleRegion(this, JJTREGULARRULEREGION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        jj_consume_token(LBRACKET);
        jj_consume_token(regularRule);
        jj_consume_token(RBRACKET);
        jj_consume_token(CRLF);
      } else {
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CRLF:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        jj_consume_token(CRLF);
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case SWITCH:
        case agg:
        case order:
        case FUN_MAP_CALL_LITERAL:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        Statement();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CycleRuleRegion() throws ParseException {
 /*@bgen(jjtree) CycleRuleRegion */
  CycleRuleRegion jjtn000 = new CycleRuleRegion(this, JJTCYCLERULEREGION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      jj_consume_token(cycleRule);
      RegionProperty();
      jj_consume_token(RBRACKET);
      jj_consume_token(CRLF);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CRLF:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        jj_consume_token(CRLF);
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case SWITCH:
        case agg:
        case order:
        case FUN_MAP_CALL_LITERAL:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_6;
        }
        Statement();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void RegionProperty() throws ParseException {
 /*@bgen(jjtree) RegionProperty */
  RegionProperty jjtn000 = new RegionProperty(this, JJTREGIONPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(frequency);
      jj_consume_token(ASSIGNOP);
      StringLiteral();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * Expression syntax follows.
 */
  final public void Expression() throws ParseException {
    OrExpression();
  }

  final public void OrExpression() throws ParseException {
 /*@bgen(jjtree) #OrExpression(> 1) */
  OrExpression jjtn000 = new OrExpression(this, JJTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_OR:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_7;
        }
        jj_consume_token(SC_OR);
        AndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void AndExpression() throws ParseException {
 /*@bgen(jjtree) #AndExpression(> 1) */
  AndExpression jjtn000 = new AndExpression(this, JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RelationalExpression();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_AND:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_8;
        }
        jj_consume_token(SC_AND);
        RelationalExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void RelationalExpression() throws ParseException {
 /*@bgen(jjtree) #RelationalExpression(> 1) */
 RelationalExpression jjtn000 = new RelationalExpression(this, JJTRELATIONALEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      AddExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NATIONALOP:
        t = jj_consume_token(NATIONALOP);
                       jjtn000.setOperator(t.image);
        AddExpression();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void AddExpression() throws ParseException {
 Token t=null;
    MultiExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDOP:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_9;
      }
      t = jj_consume_token(ADDOP);
      MultiExpression();
                       AddExpression jjtn001 = new AddExpression(this, JJTADDEXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtc001 = false;
                       jjtn001.setOperator(t.image);
      } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
      }
    }
  }

  final public void MultiExpression() throws ParseException {
 Token t=null;
    UnaryExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIOP:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_10;
      }
      t = jj_consume_token(MULTIOP);
      UnaryExpression();
                       MultiExpression jjtn001 = new MultiExpression(this, JJTMULTIEXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtc001 = false;
                       jjtn001.setOperator(t.image);
      } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
 /*@bgen(jjtree) #UnaryExpression( t != null) */
 UnaryExpression jjtn000 = new UnaryExpression(this, JJTUNARYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNARYOP:
        t = jj_consume_token(UNARYOP);
                  jjtn000.setOperator(t.image);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      PrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  t != null);
    }
    }
  }

  final public void PrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
      NumberLiteral();
      break;
    case STRING_LITERAL:
      StringLiteral();
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_2(2147483647)) {
        VariableLiteral();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          Expression();
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[13] = jj_gen;
          if (jj_2_3(2147483647)) {
            Function();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FUN_MAP_CALL_LITERAL:
              FunctionMapCall();
              break;
            case IDENTIFIER:
              Name();
              break;
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void VariableLiteral() throws ParseException {
 /*@bgen(jjtree) VariableLiteral */
        VariableLiteral jjtn000 = new VariableLiteral(this, JJTVARIABLELITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = null ;
    try {
      jj_consume_token(LBRACE);
      t = jj_consume_token(IDENTIFIER);
                              jjtn000.setName(t.image); jjtn000.setBeginLine(t.beginLine); jjtn000.setBeginColumn(t.beginColumn);
      jj_consume_token(RBRACE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Function() throws ParseException {
 /*@bgen(jjtree) Function */
  Function jjtn000 = new Function(this, JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Name();
      jj_consume_token(LPAREN);
      ArgumentList();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ArgumentList() throws ParseException {
 /*@bgen(jjtree) ArgumentList */
  ArgumentList jjtn000 = new ArgumentList(this, JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case FUN_MAP_CALL_LITERAL:
      case UNARYOP:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
        if (jj_2_4(2147483647)) {
          NamedArgument();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FALSE:
          case TRUE:
          case FUN_MAP_CALL_LITERAL:
          case UNARYOP:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
            Expression();
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_11;
          }
          jj_consume_token(COMMA);
          if (jj_2_5(2147483647)) {
            NamedArgument();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FALSE:
            case TRUE:
            case FUN_MAP_CALL_LITERAL:
            case UNARYOP:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
              Expression();
              break;
            default:
              jj_la1[17] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void NamedArgumentList() throws ParseException {
 /*@bgen(jjtree) NamedArgumentList */
  NamedArgumentList jjtn000 = new NamedArgumentList(this, JJTNAMEDARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NamedArgument();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        NamedArgument();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NamedArgument() throws ParseException {
 /*@bgen(jjtree) NamedArgument */
  NamedArgument jjtn000 = new NamedArgument(this, JJTNAMEDARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null ;
    try {
      Name();
      jj_consume_token(COLON);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionMapCall() throws ParseException {
 /*@bgen(jjtree) FunctionMapCall */
 FunctionMapCall jjtn000 = new FunctionMapCall(this, JJTFUNCTIONMAPCALL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(FUN_MAP_CALL_LITERAL);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                 jjtn000.setMapping(t.image.substring(1,t.image.length()-1));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public BigDecimal NumberLiteral() throws ParseException {
 /*@bgen(jjtree) NumberLiteral */
  NumberLiteral jjtn000 = new NumberLiteral(this, JJTNUMBERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null; Boolean b=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
                         jjtn000.setLiteral(new BigDecimal(t.image));
        break;
      case FLOATING_POINT_LITERAL:
        t = jj_consume_token(FLOATING_POINT_LITERAL);
                                jjtn000.setLiteral(new BigDecimal(t.image));
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return new BigDecimal(t.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void StringLiteral() throws ParseException {
 /*@bgen(jjtree) StringLiteral */
  StringLiteral jjtn000 = new StringLiteral(this, JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null; Boolean b=null;
    try {
      t = jj_consume_token(STRING_LITERAL);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.setLiteral(t.image.substring(1, t.image.length()-1));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BooleanLiteral() throws ParseException {
 /*@bgen(jjtree) BooleanLiteral */
  BooleanLiteral jjtn000 = new BooleanLiteral(this, JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setLiteral(Boolean.valueOf(t.image));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Name() throws ParseException {
 /*@bgen(jjtree) Name */
 Name jjtn000 = new Name(this, JJTNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t1=null,t2=null;
    try {
      t1 = jj_consume_token(IDENTIFIER);
                  jjtn000.setName(t1.image); jjtn000.setBeginLine(t1.beginLine); jjtn000.setBeginColumn(t1.beginColumn);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_13;
        }
        jj_consume_token(DOT);
        t2 = jj_consume_token(IDENTIFIER);

                              jjtn000.setName(jjtn000.getName() + "." + t2.image);
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SWITCH:
      case FUN_MAP_CALL_LITERAL:
      case IDENTIFIER:
        if (jj_2_6(2147483647)) {
          AssignmentStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            FunctionStatement();
            break;
          case FUN_MAP_CALL_LITERAL:
            FunctionMapCall();
            break;
          case SWITCH:
            SwitchStatement();
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CRLF:
          label_14:
          while (true) {
            jj_consume_token(CRLF);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CRLF:
              ;
              break;
            default:
              jj_la1[24] = jj_gen;
              break label_14;
            }
          }
          break;
        case 0:
          jj_consume_token(0);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case LBRACE:
        BlockStatement();
        break;
      case IF:
        IfStatement();
        break;
      case agg:
        AggStatement();
        break;
      case order:
        OrderStatement();
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        exceptions.add(e);
        skitToNextStatement(null,CRLF );
    }
  }

  final public void AggStatement() throws ParseException {
  /*@bgen(jjtree) AggStatement */
  AggStatement jjtn000 = new AggStatement(this, JJTAGGSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(agg);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Name();
                            jjtn000.setAggNode(((SimpleNode)jjtree.peekNode()));
        jj_consume_token(COMMA);
        StringLiteral();
                                                                                                         jjtn000.setAggRefNameNode(((SimpleNode)jjtree.peekNode()));
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      BlockStatement();
                          jjtn000.setStmtNode((SimpleNode)jjtree.peekNode());
                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                jjtc000 = false;

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void OrderStatement() throws ParseException {
  /*@bgen(jjtree) OrderStatement */
  OrderStatement jjtn000 = new OrderStatement(this, JJTORDERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);BigDecimal top = null;
    try {
      jj_consume_token(order);
      jj_consume_token(LPAREN);
      Name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        top = NumberLiteral();
                                                               jjtn000.setTop(top.intValue());
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        jj_consume_token(desc);
                                                                                                                              jjtn000.setAsc(false);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      BlockStatement();
                    jjtn000.setStmtNode((SimpleNode)jjtree.peekNode());
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;

    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void FunctionStatement() throws ParseException {
 /*@bgen(jjtree) FunctionStatement */
  FunctionStatement jjtn000 = new FunctionStatement(this, JJTFUNCTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Function();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BlockStatement() throws ParseException {
 /*@bgen(jjtree) #BlockStatement(> 1) */
  BlockStatement jjtn000 = new BlockStatement(this, JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CRLF:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_15;
        }
        jj_consume_token(CRLF);
      }
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case SWITCH:
        case agg:
        case order:
        case FUN_MAP_CALL_LITERAL:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_16;
        }
        Statement();
      }
      jj_consume_token(RBRACE);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CRLF:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_17;
        }
        jj_consume_token(CRLF);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void AssignmentStatement() throws ParseException {
 /*@bgen(jjtree) AssignmentStatement */
  AssignmentStatement jjtn000 = new AssignmentStatement(this, JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s = null;
    try {
      Name();
      s = AssignmentOperator();
                            jjtn000.setOperator(s);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String AssignmentOperator() throws ParseException {
  Token t = null;
    t = jj_consume_token(ASSIGNOP);
                   {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public void SwitchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
  SwitchStatement jjtn000 = new SwitchStatement(this, JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LBRACE);
      label_18:
      while (true) {
        jj_consume_token(CRLF);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CRLF:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_18;
        }
      }
      label_19:
      while (true) {
        SwitchCase jjtn001 = new SwitchCase(this, JJTSWITCHCASE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(CASE);
          Expression();
          jj_consume_token(COLON);
          label_20:
          while (true) {
            jj_consume_token(CRLF);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CRLF:
              ;
              break;
            default:
              jj_la1[34] = jj_gen;
              break label_20;
            }
          }
          Statement();
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_19;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _DEFAULT:
        SwitchCase jjtn002 = new SwitchCase(this, JJTSWITCHCASE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(_DEFAULT);
          jj_consume_token(COLON);
          label_21:
          while (true) {
            jj_consume_token(CRLF);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CRLF:
              ;
              break;
            default:
              jj_la1[36] = jj_gen;
              break label_21;
            }
          }
          Statement();
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  IfStatement jjtn000 = new IfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        BlockStatement();
        break;
      case CRLF:
        label_22:
        while (true) {
          jj_consume_token(CRLF);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CRLF:
            ;
            break;
          default:
            jj_la1[38] = jj_gen;
            break label_22;
          }
        }
        Statement();
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          BlockStatement();
          break;
        case CRLF:
          label_23:
          while (true) {
            jj_consume_token(CRLF);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CRLF:
              ;
              break;
            default:
              jj_la1[40] = jj_gen;
              break label_23;
            }
          }
          Statement();
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  boolean skitToNextStatement(List<Exception>exceptions,int kind) throws ParseException {
                                                                         /*@bgen(jjtree) skitToNextStatement */
     skitToNextStatement jjtn000 = new skitToNextStatement(this, JJTSKITTONEXTSTATEMENT);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {Token t = null;
        do{
                t = getNextToken();
                //log.debug("token : " + tokenImage[t.kind] + " ; is EOF : " + ( t.kind == EOF));
                if(t.kind == EOF) return false;
        }while(t.kind != kind);
        return true;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(regularRule)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_24()) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(ASSIGNOP)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  public RuleParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x1605000,0x0,0x1605000,0x0,0x0,0x2000000,0x0,0x0,0x0,0x8800,0x0,0x1000000,0x1008800,0x0,0x1008800,0x1008800,0x0,0x0,0x8800,0x0,0x1004000,0x0,0x1,0x1605000,0x0,0x0,0x0,0x0,0x1605000,0x0,0x0,0x0,0x10000,0x0,0x80,0x0,0x0,0x0,0x0,0x200,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x100000,0x0,0x80,0x1000,0x400,0x44000000,0x0,0x0,0x44000400,0x0,0x44000400,0x44000400,0x0,0x44000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x8000,0x400,0x8000,0x108,0x8000,0x108,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x40,0x8,0x149,0x2000,0x149,0x149,0x2000,0x0,0x0,0x4000,0x8,0x8000,0x8000,0x108,0x40,0x2000,0x2000,0x8000,0x108,0x8000,0x8000,0x8000,0x0,0x8000,0x0,0x8000,0x8100,0x8000,0x8100,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public RuleParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public RuleParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RuleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public RuleParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RuleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public RuleParser(RuleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(RuleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[80];
    for (int i = 0; i < 80; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 80; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
