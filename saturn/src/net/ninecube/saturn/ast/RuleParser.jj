/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. /Users/jeffrey/Documents/jxb/ninecube/saturn/src/net/ninecube/saturn/ast/RuleParser.jj */
/*@egen*/options {                              
  STATIC=false;                         
  UNICODE_INPUT=true;
  JAVA_UNICODE_ESCAPE=false;                  
  IGNORE_CASE=true;
}

PARSER_BEGIN(RuleParser)

package net.ninecube.saturn.ast;
import java.math.*;
import java.util.*;


import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import net.ninecube.saturn.*;
import net.ninecube.saturn.exception.*;

@SuppressWarnings("unchecked")
public class RuleParser/*@bgen(jjtree)*/implements RuleParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTRuleParserState jjtree = new JJTRuleParserState();

/*@egen*/
	
  protected static Log log = LogFactory.getLog(RuleParser.class);
  private List<Exception> exceptions = new ArrayList<Exception>();
  public RuleParser(String s) {
    this(new java.io.StringReader(s));
  }
  
  public void ReInit(String s) {
    ReInit(new java.io.StringReader(s));
  }
  
  public Start parse(Context context) {
    try{
	  Start();
    }catch(Exception exc){
      exceptions.add(new RuleSyntaxException(exc.getMessage(),exc));
   }
   Start node =  (Start)jjtree.rootNode();
   log.debug("node : " + ((SimpleNode) node).getDumpStr());
   if(node !=null && context != null)
   	node.validate(context,exceptions);
    if(!exceptions.isEmpty())  throw new RuleSyntaxExceptions(exceptions);
      return node;
  }

  public Filter parseFilter(Context context) {
    try{
	  Filter();
    }catch(Exception exc){
      exceptions.add(new RuleSyntaxException(exc.getMessage(),exc));
    }
   Filter node  = null;
   if(jjtree.nodeArity() > 0 ) node =  (Filter)jjtree.rootNode();
   if(node !=null && context != null)
   	node.validate(context,exceptions);
    if(!exceptions.isEmpty())  throw new RuleSyntaxExceptions(exceptions);
      return node;
  }
 
}

PARSER_END(RuleParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])*>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
  < _DEFAULT: "default" >
| < DO: "do" >
| < ELSE: "else" | "\u5426\u5219">
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < IF: "if" | "\u5982\u679c">
| < IMPORT: "import" >
| < SWITCH: "switch" >
| < TRUE: "true" >
| < CASE: "case" >

| < regularRule : "regularRule" >
| < restrictedRule : "restrictedRule" >
| < cycleRule : "cycleRule" >
| < frequency : "frequency" >

| <agg : "agg" >
| <order : "order" >
| <desc : "desc" >


}


TOKEN : {
 <FUN_MAP_CALL_LITERAL : 
 	"<" (~[">"] | "{" | "}" )* ">"
 >
}
	

TOKEN : /* OPERATORS */
{
  < NATIONALOP: <LE> | <GE> | <EQ> | <NE> | <GT> | <LT>   >
| < #GT: ">" >
| < #LT: "<" >
| < #EQ: "==" >
| < #LE: "<=" >
| < #GE: ">=" >
| < #NE: "!=" >
|
  < ASSIGNOP: <ASSIGN> | <STARASSIGN> | <SLASHASSIGN> | <REMASSIGN> | <PLUSASSIGN> | <MINUSASSIGN> >
| < #ASSIGN: "=" | "\u7b49\u4e8e" >
| < #PLUSASSIGN: "+=" >
| < #MINUSASSIGN: "-=" >
| < #STARASSIGN: "*=" >
| < #SLASHASSIGN: "/=" >
| < #REMASSIGN: "%=" >

| < ADDOP: <PLUS> | <MINUS> >
| < #PLUS: "+" >
| < #MINUS: "-" >

| < UNARYOP: <PLUS> | <MINUS> | <BANG> >
| < #BANG: "not" >

| < MULTIOP: <STAR> | <SLASH> | <REM> >
| < #STAR: "*" >
| < #SLASH: "/" >
| < #REM: "%" >

| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < SC_OR: "or" | "\u6216\u8005">
| < SC_AND: "and" | "\u5e76\u4e14">
| < INCR: "++" >
| < DECR: "--" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
    	"\"" <STRING_LITERALCONTENT> "\""
   |
       "'" <STRING_LITERALCONTENT_SINGLEQUOTE> "'"
  >
|  
  < #STRING_LITERALCONTENT:
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
  >
|  
  < #STRING_LITERALCONTENT_SINGLEQUOTE:
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
  >
 
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: (<LETTER> (<LETTER>|<DIGIT>)*) 
  | 
     ((<DIGIT>)+(<LETTER>)+ (<LETTER>|<DIGIT>)*) >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  > 
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < CRLF:(("\r")? "\n")+ >
}

void Start() :
{/*@bgen(jjtree) Start */
  Start jjtn000 = new Start(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	(LOOKAHEAD(1) <CRLF>)*
	RegularRuleRegion()
	(CycleRuleRegion() )*
	<EOF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Filter() :
{/*@bgen(jjtree) Filter */
  Filter jjtn000 = new Filter(this, JJTFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Filter */
        try {
/*@egen*/
	Expression()
	<EOF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

void RegularRuleRegion() :
{/*@bgen(jjtree) RegularRuleRegion */
  RegularRuleRegion jjtn000 = new RegularRuleRegion(this, JJTREGULARRULEREGION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RegularRuleRegion */
        try {
/*@egen*/
	[ LOOKAHEAD(2)  "[" <regularRule> "]" <CRLF> ]  
	(<CRLF>)*
	( Statement() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void CycleRuleRegion() :
{/*@bgen(jjtree) CycleRuleRegion */
  CycleRuleRegion jjtn000 = new CycleRuleRegion(this, JJTCYCLERULEREGION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CycleRuleRegion */
        try {
/*@egen*/
    
	"[" <cycleRule> RegionProperty()  "]" <CRLF>
	(<CRLF>)*
	 (  Statement() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RegionProperty() :
{/*@bgen(jjtree) RegionProperty */
  RegionProperty jjtn000 = new RegionProperty(this, JJTREGIONPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RegionProperty */
        try {
/*@egen*/
	<frequency> <ASSIGNOP> StringLiteral()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
 * Expression syntax follows.
 */

void Expression()      :
{}
{
  OrExpression()
}

void OrExpression()                  :
{/*@bgen(jjtree) #OrExpression(> 1) */
  OrExpression jjtn000 = new OrExpression(this, JJTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #OrExpression(> 1) */
  try {
/*@egen*/
  AndExpression() ( <SC_OR> AndExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void AndExpression()                   :
{/*@bgen(jjtree) #AndExpression(> 1) */
  AndExpression jjtn000 = new AndExpression(this, JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AndExpression(> 1) */
  try {
/*@egen*/
  RelationalExpression() ( <SC_AND> RelationalExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void RelationalExpression()                          :
{/*@bgen(jjtree) #RelationalExpression(> 1) */
 RelationalExpression jjtn000 = new RelationalExpression(this, JJTRELATIONALEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) #RelationalExpression(> 1) */
  try {
/*@egen*/
  AddExpression() 
  ( 
    t = <NATIONALOP> { jjtn000.setOperator(t.image); } 
    AddExpression()
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void AddExpression()      :
{Token t=null;}
{
  MultiExpression() 
  ( 
    t = <ADDOP> 
    MultiExpression()/*@bgen(jjtree) #AddExpression( 2) */
                     {
                       AddExpression jjtn001 = new AddExpression(this, JJTADDEXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtc001 = false;
                     }
/*@egen*/{ jjtn001.setOperator(t.image); }/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
                     }
/*@egen*/ 
  ) * 
}

void MultiExpression()      :
{Token t=null;}
{
  UnaryExpression()
  ( 
    t = <MULTIOP> 
    UnaryExpression()/*@bgen(jjtree) #MultiExpression( 2) */
                     {
                       MultiExpression jjtn001 = new MultiExpression(this, JJTMULTIEXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtc001 = false;
                     }
/*@egen*/{ jjtn001.setOperator(t.image); }/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
                     }
/*@egen*/ 
  )*
}

void UnaryExpression()                          :
{/*@bgen(jjtree) #UnaryExpression( t != null) */
 UnaryExpression jjtn000 = new UnaryExpression(this, JJTUNARYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t=null;}
{/*@bgen(jjtree) #UnaryExpression( t != null) */
  try {
/*@egen*/
  ( t=<UNARYOP> { jjtn000.setOperator(t.image); })? 
  PrimaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  t != null);
    }
  }
/*@egen*/
}

void PrimaryExpression()      :
{}
{
  NumberLiteral()
|
  StringLiteral()
|
  BooleanLiteral()  
|
  LOOKAHEAD("{")
  VariableLiteral()  
| 
  "(" Expression() ")" 
|
  LOOKAHEAD(Name() "(")
  Function()  
|
 FunctionMapCall()  
|
  Name()  
}

void VariableLiteral() :
{/*@bgen(jjtree) VariableLiteral */
        VariableLiteral jjtn000 = new VariableLiteral(this, JJTVARIABLELITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t = null ;
}
{/*@bgen(jjtree) VariableLiteral */
        try {
/*@egen*/
	"{" t = <IDENTIFIER> {jjtn000.setName(t.image); jjtn000.setBeginLine(t.beginLine); jjtn000.setBeginColumn(t.beginColumn);} "}"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Function() :
{/*@bgen(jjtree) Function */
  Function jjtn000 = new Function(this, JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/
  Name()  
  "("   ArgumentList()  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
  
}


void ArgumentList() :
{/*@bgen(jjtree) ArgumentList */
  ArgumentList jjtn000 = new ArgumentList(this, JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
try {
/*@egen*/
[	
	(	
	 LOOKAHEAD(Name()":")
	  NamedArgument()
	|
	  Expression()
	)
	(
	   "," 
	  ( 
	  LOOKAHEAD(Name()":")
	  NamedArgument()
	|
	  Expression()
	  )
	)*  
]/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void NamedArgumentList() :
{/*@bgen(jjtree) NamedArgumentList */
  NamedArgumentList jjtn000 = new NamedArgumentList(this, JJTNAMEDARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NamedArgumentList */
  try {
/*@egen*/
  NamedArgument() ( "," NamedArgument() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NamedArgument() :
{/*@bgen(jjtree) NamedArgument */
  NamedArgument jjtn000 = new NamedArgument(this, JJTNAMEDARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t=null ; }
{/*@bgen(jjtree) NamedArgument */
  try {
/*@egen*/
  Name()
  ":" Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void FunctionMapCall() : 
{/*@bgen(jjtree) FunctionMapCall */
 FunctionMapCall jjtn000 = new FunctionMapCall(this, JJTFUNCTIONMAPCALL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) FunctionMapCall */
        try {
/*@egen*/
	t=<FUN_MAP_CALL_LITERAL>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/{jjtn000.setMapping(t.image.substring(1,t.image.length()-1));}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

BigDecimal NumberLiteral() :
{/*@bgen(jjtree) NumberLiteral */
  NumberLiteral jjtn000 = new NumberLiteral(this, JJTNUMBERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t=null; Boolean b=null; }
{/*@bgen(jjtree) NumberLiteral */
  try {
/*@egen*/
  (
    t=<INTEGER_LITERAL>{ jjtn000.setLiteral(new BigDecimal(t.image));}
  |
    t=<FLOATING_POINT_LITERAL>{ jjtn000.setLiteral(new BigDecimal(t.image));}
  )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {return new BigDecimal(t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StringLiteral() :
{/*@bgen(jjtree) StringLiteral */
  StringLiteral jjtn000 = new StringLiteral(this, JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t=null; Boolean b=null; }
{/*@bgen(jjtree) StringLiteral */
  try {
/*@egen*/
  (
    t=<STRING_LITERAL>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{ jjtn000.setLiteral(t.image.substring(1, t.image.length()-1));}
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  
}


void BooleanLiteral() :
{/*@bgen(jjtree) BooleanLiteral */
  BooleanLiteral jjtn000 = new BooleanLiteral(this, JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t=null; }
{/*@bgen(jjtree) BooleanLiteral */
  try {
/*@egen*/
  (
      t="true"
    |
      t="false"
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  
  { jjtn000.setLiteral(Boolean.valueOf(t.image)); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Name() :
{/*@bgen(jjtree) Name */
 Name jjtn000 = new Name(this, JJTNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1=null,t2=null;}
{/*@bgen(jjtree) Name */
  try {
/*@egen*/
  t1=<IDENTIFIER>{jjtn000.setName(t1.image); jjtn000.setBeginLine(t1.beginLine); jjtn000.setBeginColumn(t1.beginColumn);}
    ( "." t2 = <IDENTIFIER>{}{jjtn000.setName(jjtn000.getName() + "." + t2.image);})*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

/*
 * Statement syntax follows.
 */

void Statement()      :
{}
{
try{
	(
		  LOOKAHEAD(Name() AssignmentOperator())
		  AssignmentStatement()
		|
		  FunctionStatement() 
		|
 		  FunctionMapCall()  
		|
		  SwitchStatement()
	) ((<CRLF>)+ | <EOF> )
|
	BlockStatement()
|
	IfStatement()
|  
	AggStatement()
| 
	OrderStatement()
}catch(ParseException e){
	exceptions.add(e);
	skitToNextStatement(null,CRLF );	
}	
	
 }
 
	
 
 void AggStatement() :
 {/*@bgen(jjtree) AggStatement */
  AggStatement jjtn000 = new AggStatement(this, JJTAGGSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) AggStatement */
        try {
/*@egen*/
 	<agg>["("  (Name() {jjtn000.setAggNode(((SimpleNode)jjtree.peekNode())); }) "," StringLiteral() {jjtn000.setAggRefNameNode(((SimpleNode)jjtree.peekNode()));}")"] 
 	BlockStatement() {jjtn000.setStmtNode((SimpleNode)jjtree.peekNode());}/*@bgen(jjtree)*/
                                                                              {
                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                jjtc000 = false;
                                                                              }
/*@egen*/{}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
 }
 
 void OrderStatement() :
 {/*@bgen(jjtree) OrderStatement */
  OrderStatement jjtn000 = new OrderStatement(this, JJTORDERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/BigDecimal top = null;}
 {/*@bgen(jjtree) OrderStatement */
   try {
/*@egen*/
   <order> "(" Name() [LOOKAHEAD(1) "," top = NumberLiteral() {jjtn000.setTop(top.intValue());} ]  [LOOKAHEAD(1) ","  <desc> {jjtn000.setAsc(false);} ] ")" 
   BlockStatement(){jjtn000.setStmtNode((SimpleNode)jjtree.peekNode());}/*@bgen(jjtree)*/
                                                                        {
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
                                                                        }
/*@egen*/{}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
 
 }

void FunctionStatement():
{/*@bgen(jjtree) FunctionStatement */
  FunctionStatement jjtn000 = new FunctionStatement(this, JJTFUNCTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionStatement */
  try {
/*@egen*/
  Function()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void BlockStatement()                    :
{/*@bgen(jjtree) #BlockStatement(> 1) */
  BlockStatement jjtn000 = new BlockStatement(this, JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BlockStatement(> 1) */
  try {
/*@egen*/
  "{" (<CRLF>)* (Statement() )* "}"(<CRLF>)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/ 
}

void AssignmentStatement() :
{/*@bgen(jjtree) AssignmentStatement */
  AssignmentStatement jjtn000 = new AssignmentStatement(this, JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String s = null; }
{/*@bgen(jjtree) AssignmentStatement */
  try {
/*@egen*/
  Name() 
  s = AssignmentOperator(){ jjtn000.setOperator(s); } 
  Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

String AssignmentOperator()       :
{ Token t = null; }
{
  t = <ASSIGNOP> { return t.image; }
}


void SwitchStatement() :
{/*@bgen(jjtree) SwitchStatement */
  SwitchStatement jjtn000 = new SwitchStatement(this, JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwitchStatement */
  try {
/*@egen*/
  "switch" "{" (<CRLF>)+
    (/*@bgen(jjtree) SwitchCase */
      {
        SwitchCase jjtn001 = new SwitchCase(this, JJTSWITCHCASE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ ( "case" Expression() ":" (<CRLF>)+  Statement() )/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/ )+
    (/*@bgen(jjtree) SwitchCase */
      {
        SwitchCase jjtn002 = new SwitchCase(this, JJTSWITCHCASE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ ( "default" ":" (<CRLF>)+ Statement() )/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/ )?
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}


void IfStatement() :
{/*@bgen(jjtree) IfStatement */
  IfStatement jjtn000 = new IfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/
  <IF> Expression() 
(  
	BlockStatement() 
|  
	(<CRLF>)+ Statement() 
)  
  [ LOOKAHEAD(1) <ELSE>
(  
	BlockStatement() 
|  
	(<CRLF>)+ Statement() 
)   
   ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
 *\u8fd4\u56detrue\u5c06\u7ee7\u7eed\u626b\u63cf\u4e0b\u4e00\u4e2a\u8bed\u53e5
 *\u8fd4\u52a0false\u7ed3\u675f
 */
JAVACODE boolean skitToNextStatement(List<Exception>exceptions,int kind){/*@bgen(jjtree) skitToNextStatement */
     skitToNextStatement jjtn000 = new skitToNextStatement(this, JJTSKITTONEXTSTATEMENT);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {
/*@egen*/
	Token t = null;
	do{
		t = getNextToken();
		//log.debug("token : " + tokenImage[t.kind] + " ; is EOF : " + ( t.kind == EOF));
		if(t.kind == EOF) return false;
	}while(t.kind != kind);
	return true;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

