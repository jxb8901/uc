/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. /Users/jeffrey/Documents/jxb/ninecube/saturn/src/net/ninecube/formula/parser/FormulaParser.jj */
/*@egen*/
/**
 * \u516c\u5f0f\u5f15\u64ce\u8bed\u6cd5\u5b9a\u4e49\u6587\u4ef6
 * @author JXB
 */


options {                               
  STATIC=false;                         
  UNICODE_INPUT=true;
  JAVA_UNICODE_ESCAPE=false;
}

PARSER_BEGIN(FormulaParser)

package net.ninecube.formula.parser;

@SuppressWarnings("unchecked")
public class FormulaParser/*@bgen(jjtree)*/implements FormulaParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTFormulaParserState jjtree = new JJTFormulaParserState();

/*@egen*/
  public FormulaParser() {
  	this("");
  }
  
  public FormulaParser(String s) {
    this(new java.io.StringReader(s));
  }
  
  public void ReInit(String s) {
    ReInit(new java.io.StringReader(s));
  }
  
  public ASTFormula parse() throws ParseException {
    return Formula();
  }
}

PARSER_END(FormulaParser)


SKIP :
{
  " "
| "\t"
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < DECIMAL_LITERAL: (["0"-"9"])+ ("." (["0"-"9"])+)? >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: (<LETTER>|<UNICODE>|<DIGIT>) (<LETTER>|<UNICODE>|<DIGIT>)* >
|
  < #UNICODE: ~["\u0000"-"\u00ff"] >
|
  < #LETTER: [".","_","$","!","|","A"-"Z","a"-"z"] >
|
  < #DIGIT: ["0"-"9"] >
}

private ASTFormula Formula() : {/*@bgen(jjtree) Formula */
  ASTFormula jjtn000 = new ASTFormula(this, JJTFORMULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Formula */
  try {
/*@egen*/
  AdditiveFormula() [ "{" PropertiesList() "}" ] <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

private void AdditiveFormula()       : {}
{/*@bgen(jjtree) #Arith(> 1) */
  {
    ASTArith jjtn001 = new ASTArith(this, JJTARITH);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    MultiplicativeFormula() 
    ( 
      ( ("+") { jjtn001.setOperator(ASTArith.Operator.add); } | "-" { jjtn001.setOperator(ASTArith.Operator.sub); } ) 
      MultiplicativeFormula() 
    )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

private void MultiplicativeFormula()       : {}
{/*@bgen(jjtree) #Arith(> 1) */
  {
    ASTArith jjtn001 = new ASTArith(this, JJTARITH);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    Term() 
    ( 
      ( "*" { jjtn001.setOperator(ASTArith.Operator.mult); } | "/" { jjtn001.setOperator(ASTArith.Operator.div); } ) 
      Term() 
    )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

private void Term()       : {}
{
  "(" AdditiveFormula() ")" 
| 
  Factor() 
| 
  Function()
}

private void Factor() : 
{/*@bgen(jjtree) Factor */
  ASTFactor jjtn000 = new ASTFactor(this, JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Factor */
  try {
/*@egen*/
  t = <DECIMAL_LITERAL>
  {
    jjtn000.setFactor(t.image);
  }
  ( "%"
    {
      jjtn000.setPercent(true);
    }
  )?/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

private void Function() :
{/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(this, JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/
  t = <IDENTIFIER>
  {
    jjtn000.setName(t.image);
  }
  [ "(" ArgumentList() ")" ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

private void ArgumentList()       : {} 
{
  Argument() ( "," Argument() )*
}

private void Argument() :
{/*@bgen(jjtree) Argument */
  ASTArgument jjtn000 = new ASTArgument(this, JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t1 = null, t2 = null;
}
{/*@bgen(jjtree) Argument */
  try {
/*@egen*/
  ( t1 = <IDENTIFIER> | t1 = <DECIMAL_LITERAL> ) [ ":" ( t2 = <IDENTIFIER> | t2 = <DECIMAL_LITERAL> ) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (t2 == null) { t2 = t1; t1 = null; }
    jjtn000.setArgument(t1 == null ? "" : t1.image, t2.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

private void PropertiesList()       : {} 
{
  Argument() ( "," Argument() )*
}
